InstructionSet XCoreVALU extends RISCVBase {
instructions {
// SOURCE FILE: instr_srcs/XCoreVALU1.txt
	CV_ABS {
		encoding: 7'b0101000 :: 5'b00000 :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((signed)X[rs1] < 0) ? (-X[rs1])[32-1:0] : X[rs1];
			}
		}
	}
	CV_SLET {
		encoding: 7'b0101001 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd] = (unsigned<1>)((signed)X[rs1] <= (signed)X[rs2][31: 0]);
			}
		}
	}
	CV_SLETU {
		encoding: 7'b0101010 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd] = (unsigned<1>)((unsigned)X[rs1] <= (unsigned)X[rs2][31: 0]);
			}
		}
	}
	CV_MIN {
		encoding: 7'b0101011 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((signed)X[rs1] < (signed)X[rs2][31: 0]) ? X[rs1] : X[rs2][31: 0];
			}
		}
	}
	CV_MINU {
		encoding: 7'b0101100 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((unsigned)X[rs1] < (unsigned)X[rs2][31: 0]) ? X[rs1] : X[rs2][31: 0];
			}
		}
	}
	CV_MAX {
		encoding: 7'b0101101 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((signed)X[rs1] > (signed)X[rs2][31: 0]) ? X[rs1] : X[rs2][31: 0];
			}
		}
	}
	CV_MAXU {
		encoding: 7'b0101110 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((unsigned)X[rs1] > (unsigned)X[rs2][31: 0]) ? X[rs1] : X[rs2][31: 0];
			}
		}
	}
	CV_EXTHS {
		encoding: 7'b0110000 :: 5'b00000 :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}";
		behavior: {
			if (rd != 0) {
				X[rd] = (signed)X[rs1][15:0];
			}
		}
	}
	CV_EXTHZ {
		encoding: 7'b0110001 :: 5'b00000 :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}";
		behavior: {
			if (rd != 0) {
				X[rd] = (unsigned)X[rs1][15:0];
			}
		}
	}
	CV_EXTBS {
		encoding: 7'b0110010 :: 5'b00000 :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}";
		behavior: {
			if (rd != 0) {
				X[rd] = (signed)X[rs1][7:0];
			}
		}
	}
	CV_EXTBZ {
		encoding: 7'b0110011 :: 5'b00000 :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}";
		behavior: {
			if (rd != 0) {
				X[rd] = (unsigned)X[rs1][7:0];
			}
		}
	}
// SOURCE FILE: instr_srcs/XCoreVALU2.txt
	CV_CLIP {
		encoding: 7'b0111000 :: Iuimm5[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {Iuimm5}";
		behavior: {
			if (rd != 0) {
				signed<32> a = ((Iuimm5) ? -(32'd1 << (Iuimm5 - 1)) : -1)[31:0];
				signed<32> b = ((Iuimm5) ? ((32'd1 << (Iuimm5 - 1)) - 1) : 0)[31:0];
				if (X[rs1] <= a) X[rd] = a;
				else if (X[rs1] >= b) X[rd] = b;
				else X[rd] = X[rs1];
			}
		}
	}
	CV_CLIPU {
		encoding: 7'b0111001 :: Iuimm5[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {Iuimm5}";
		behavior: {
			if (rd != 0) {
				signed<32> a = 0;
				signed<32> b = ((Iuimm5) ? ((32'd1 << (Iuimm5 - 1)) - 1) : 0)[31:0];
				if ((signed)X[rs1] <= a) X[rd] = a;
				else if ((signed)X[rs1] >= b) X[rd] = b;
				else X[rd] = X[rs1];
			}
		}
	}
	CV_CLIPR {
		encoding: 7'b0111010 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				signed<32> a = (-(X[rs2][31: 0] + 1))[31:0];
				signed<32> b = X[rs2][31: 0];
				if ((signed)X[rs1] <= a) X[rd] = a;
				else if ((signed)X[rs1] >= b) X[rd] = b;
				else X[rd] = X[rs1];
			}
		}
	}
	CV_CLIPUR {
		encoding: 7'b0111011 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				signed<32> a = 0;
				signed<32> b = X[rs2][31: 0];
				if ((signed)X[rs1] <= a) X[rd] = a;
				else if ((signed)X[rs1] >= b) X[rd] = b;
				else X[rd] = X[rs1];
			}
		}
	}
// SOURCE FILE: instr_srcs/XCoreVALU3.txt
	CV_ADDN {
		encoding: 2'b00 :: Luimm5[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1011011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}, {Luimm5}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((signed)(X[rs1] + X[rs2][31: 0]) >> Luimm5)[31:0];
			}
		}
	}
	CV_ADDUN {
		encoding: 2'b01 :: Luimm5[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1011011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}, {Luimm5}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((unsigned)(X[rs1] + X[rs2][31: 0]) >> Luimm5)[31:0];
			}
		}
	}
	CV_ADDRN {
		encoding: 2'b10 :: Luimm5[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1011011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}, {Luimm5}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((signed)(X[rs1] + X[rs2][31: 0] + (32'd1 << (Luimm5 - 1))[31:0])[31:0] >> Luimm5)[31:0];
			}
		}
	}
	CV_ADDURN {
		encoding: 2'b11 :: Luimm5[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1011011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}, {Luimm5}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((unsigned)(X[rs1] + X[rs2][31: 0] + (32'd1 << (Luimm5 - 1))[31:0])[31:0] >> Luimm5)[31:0];
			}
		}
	}
	CV_SUBN {
		encoding: 2'b00 :: Luimm5[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b1011011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}, {Luimm5}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((signed)(X[rs1] - X[rs2][31: 0]) >> Luimm5)[31:0];
			}
		}
	}
	CV_SUBUN {
		encoding: 2'b01 :: Luimm5[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b1011011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}, {Luimm5}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((unsigned)(X[rs1] - X[rs2][31: 0]) >> Luimm5)[31:0];
			}
		}
	}
	CV_SUBRN {
		encoding: 2'b10 :: Luimm5[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b1011011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}, {Luimm5}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((signed)(X[rs1] - X[rs2][31: 0] + (32'd1 << (Luimm5 - 1))[31:0])[31:0] >> Luimm5)[31:0];
			}
		}
	}
	CV_SUBURN {
		encoding: 2'b11 :: Luimm5[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b1011011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}, {Luimm5}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((unsigned)(X[rs1] - X[rs2][31: 0] + (32'd1 << (Luimm5 - 1))[31:0])[31:0] >> Luimm5)[31:0];
			}
		}
	}
// SOURCE FILE: instr_srcs/XCoreVALU4.txt
	CV_ADDNR {
		encoding: 7'b1000000 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((signed)(X[rd] + X[rs1]) >> X[rs2][31: 0][4:0])[31:0];
			}
		}
	}
	CV_ADDUNR {
		encoding: 7'b1000001 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((unsigned)(X[rd] + X[rs1]) >> X[rs2][31: 0][4:0])[31:0];
			}
		}
	}
	CV_ADDRNR {
		encoding: 7'b1000010 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((signed)(X[rd] + X[rs1] + (32'd1 << (X[rs2][31: 0][4:0] - 1))) >> X[rs2][31: 0][4:0])[31:0];
			}
		}
	}
	CV_ADDURNR {
		encoding: 7'b1000011 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((unsigned)(X[rd] + X[rs1] + (32'd1 << (X[rs2][31: 0][4:0] - 1))) >> X[rs2][31: 0][4:0])[31:0];
			}
		}
	}
	CV_SUBNR {
		encoding: 7'b1000100 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((signed)(X[rd] - X[rs1]) >> X[rs2][31: 0][4:0])[31:0];
			}
		}
	}
	CV_SUBUNR {
		encoding: 7'b1000101 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((unsigned)(X[rd] - X[rs1]) >> X[rs2][31: 0][4:0])[31:0];
			}
		}
	}
	CV_SUBRNR {
		encoding: 7'b1000110 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((signed)(X[rd] - X[rs1] + (32'd1 << (X[rs2][31: 0][4:0] - 1))[31:0])[31:0] >> X[rs2][31: 0][4:0])[31:0];
			}
		}
	}
	CV_SUBURNR {
		encoding: 7'b1000111 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((unsigned)(X[rd] - X[rs1] + (32'd1 << (X[rs2][31: 0][4:0] - 1))[31:0])[31:0] >> X[rs2][31: 0][4:0])[31:0];
			}
		}
	}
// SOURCE FILE: instr_srcs/XCoreVALU_BitmanipI.txt
	CV_EXTRACT {
		encoding: 2'b00 :: Luimm5[4:0] :: Iuimm5[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1011011;
		assembly: "{name(rd)}, {name(rs1)}, {Luimm5}, {Iuimm5}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((signed<32>)(((X[rs1] >> Iuimm5) & ((32'd2 << Luimm5) - 1)) << (31 - Luimm5)) >> (31 - Luimm5))[31:0];
			}
		}
	}
	CV_EXTRACTU {
		encoding: 2'b01 :: Luimm5[4:0] :: Iuimm5[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1011011;
		assembly: "{name(rd)}, {name(rs1)}, {Luimm5}, {Iuimm5}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((unsigned)((X[rs1] >> Iuimm5) & ((32'd2 << Luimm5) - 1)))[31:0];
			}
		}
	}
	CV_INSERT {
		encoding: 2'b10 :: Luimm5[4:0] :: Iuimm5[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1011011;
		assembly: "{name(rd)}, {name(rs1)}, {Luimm5}, {Iuimm5}";
		behavior: {
			if (rd != 0) {
				unsigned<32> maskLow = ((32'd2 << Luimm5) - 1)[31:0];
				unsigned<32> mask = (maskLow << Iuimm5)[31:0];
				X[rd] = (X[rd] & ~mask) | ((X[rs1] & maskLow) << Iuimm5)[31:0];
			}
		}
	}
	CV_BCLR {
		encoding: 2'b00 :: Luimm5[4:0] :: Iuimm5[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1011011;
		assembly: "{name(rd)}, {name(rs1)}, {Luimm5}, {Iuimm5}";
		behavior: {
			// TODO
		}
	}
	CV_BSET {
		encoding: 2'b01 :: Luimm5[4:0] :: Iuimm5[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1011011;
		assembly: "{name(rd)}, {name(rs1)}, {Luimm5}, {Iuimm5}";
		behavior: {
			// TODO
		}
	}
	CV_BITREV {
		encoding: 2'b11 :: Luimm5[4:0] :: Iuimm5[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1011011;
		assembly: "{name(rd)}, {name(rs1)}, {Luimm5}, {Iuimm5}";
		behavior: {
			// TODO
		}
	}
// SOURCE FILE: instr_srcs/XCoreVALU_BitmanipR.txt
	CV_EXTRACTR {
		encoding: 7'b0011000 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((signed<32>)(((X[rs1] >> X[rs2][31: 0][4:0]) & ((32'd2 << X[rs2][31: 0][9:5]) - 1)) << (31 - X[rs2][31: 0][9:5])) >> (31 - X[rs2][31: 0][9:5]))[31:0];
			}
		}
	}
	CV_EXTRACTUR {
		encoding: 7'b0011001 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd] = ((unsigned)((X[rs1] >> X[rs2][31: 0][4:0]) & ((32'd2 << X[rs2][31: 0][9:5]) - 1)))[31:0];
			}
		}
	}
	CV_INSERTR {
		encoding: 7'b0011010 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				unsigned<32> maskLow = ((32'd2 << X[rs2][31: 0][9:5]) - 1)[31:0];
				unsigned<32> mask = (maskLow << X[rs2][31: 0][4:0])[31:0];
				X[rd] = (X[rd] & ~mask) | ((X[rs1] & maskLow) << X[rs2][31: 0][4:0])[31:0];
			}
		}
	}
	CV_BCLRR {
		encoding: 7'b0011100 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			// TODO
		}
	}
	CV_BSETR {
		encoding: 7'b0011101 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			// TODO
		}
	}
	CV_ROR {
		encoding: 7'b0100000 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
		behavior: {
			if (rd != 0) {
				X[rd] = (X[rs1] >> X[rs2][31: 0]) | (X[rs1] << (32 - X[rs2][31: 0]));
			}
		}
	}
	CV_FF1 {
		encoding: 7'b0100001 :: 5'b00000 :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}";
		behavior: {
			// TODO
		}
	}
	CV_FL1 {
		encoding: 7'b0100010 :: 5'b00000 :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}";
		behavior: {
			// TODO
		}
	}
	CV_CLB {
		encoding: 7'b0100011 :: 5'b00000 :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}";
		behavior: {
			if (rd != 0) {
				if (X[rs1] == 0) X[rd] = 0;
				else {
				unsigned<5> i = 0;
				while (X[rs1][31 - i] == X[rs1][31]) i = (i + 1)[4:0];
				X[rd] = i - 1;}
			}
		}
	}
	CV_CNT {
		encoding: 7'b0100100 :: 5'b00000 :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
		assembly: "{name(rd)}, {name(rs1)}";
		behavior: {
			// TODO
		}
	}
// SOURCE FILE: instr_srcs/XCoreVALU_ImmBr.txt
	CV_BEQIMM {
		encoding: Imm12[11] :: Imm12[9:4] :: simm5[4:0] :: rs1[4:0] :: 3'b110 :: Imm12[3:0] :: Imm12[10] :: 7'b0001011;
		assembly: "{name(rs1)}, {simm5}, {Imm12}";
		behavior: {
			// TODO
		}
	}
	CV_BNEIMM {
		encoding: Imm12[11] :: Imm12[9:4] :: simm5[4:0] :: rs1[4:0] :: 3'b111 :: Imm12[3:0] :: Imm12[10] :: 7'b0001011;
		assembly: "{name(rs1)}, {simm5}, {Imm12}";
		behavior: {
			// TODO
		}
	}
}
}
