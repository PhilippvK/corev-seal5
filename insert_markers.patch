commit 270e729e727456613232458fbcd97d6712bd33b2
Author: Thomas Goodfellow <thomas.goodfellow@dlr.de>
Date:   Fri Jun 2 00:25:29 2023 +0200

    v16.0.4 insertion point marks

diff --git a/clang/include/clang/Basic/BuiltinsRISCV.def b/clang/include/clang/Basic/BuiltinsRISCV.def
index c26e3b807370..b32a2251b638 100644
--- a/clang/include/clang/Basic/BuiltinsRISCV.def
+++ b/clang/include/clang/Basic/BuiltinsRISCV.def
@@ -79,5 +79,8 @@ TARGET_BUILTIN(__builtin_riscv_sm4ks, "LiLiLiIUc", "nc", "zksed")
 TARGET_BUILTIN(__builtin_riscv_sm3p0, "LiLi", "nc", "zksh")
 TARGET_BUILTIN(__builtin_riscv_sm3p1, "LiLi", "nc", "zksh")

+// BuiltinsRISCV.def - INSERTION_START
+// BuiltinsRISCV.def - INSERTION_END
+
 #undef BUILTIN
 #undef TARGET_BUILTIN
diff --git a/clang/lib/CodeGen/CGBuiltin.cpp b/clang/lib/CodeGen/CGBuiltin.cpp
index f72e04a425d9..17ff64daa4ab 100644
--- a/clang/lib/CodeGen/CGBuiltin.cpp
+++ b/clang/lib/CodeGen/CGBuiltin.cpp
@@ -19666,6 +19666,8 @@ Value *CodeGenFunction::EmitRISCVBuiltinExpr(unsigned BuiltinID,
     ID = Intrinsic::riscv_sm3p1;
     IntrinsicTypes = {ResultType};
     break;
+// CGBuiltin.cpp - INSERTION_START
+// CGBuiltin.cpp - INSERTION_END

   // Vector builtins are handled from here.
 #include "clang/Basic/riscv_vector_builtin_cg.inc"
diff --git a/llvm/include/llvm/IR/IntrinsicsRISCV.td b/llvm/include/llvm/IR/IntrinsicsRISCV.td
index e9c88f468076..5fd45721d928 100644
--- a/llvm/include/llvm/IR/IntrinsicsRISCV.td
+++ b/llvm/include/llvm/IR/IntrinsicsRISCV.td
@@ -106,6 +106,9 @@ let TargetPrefix = "riscv" in {
   // Zbkx
   def int_riscv_xperm4  : BitManipGPRGPRIntrinsics;
   def int_riscv_xperm8  : BitManipGPRGPRIntrinsics;
+
+// IntrinsicsRISCV.td - INSERTION_START
+// IntrinsicsRISCV.td - INSERTION_END
 } // TargetPrefix = "riscv"

 //===----------------------------------------------------------------------===//
diff --git a/llvm/lib/Support/RISCVISAInfo.cpp b/llvm/lib/Support/RISCVISAInfo.cpp
index 7cb1147d4265..c8ecaf77e8b9 100644
--- a/llvm/lib/Support/RISCVISAInfo.cpp
+++ b/llvm/lib/Support/RISCVISAInfo.cpp
@@ -104,6 +104,9 @@ static const RISCVSupportedExtension SupportedExtensions[] = {
     {"zicboz", RISCVExtensionVersion{1, 0}},
     {"zicbop", RISCVExtensionVersion{1, 0}},

+// RISCVISAInfo.cpp - INSERTION_START
+// RISCVISAInfo.cpp - INSERTION_END
+
     {"svnapot", RISCVExtensionVersion{1, 0}},
     {"svpbmt", RISCVExtensionVersion{1, 0}},
     {"svinval", RISCVExtensionVersion{1, 0}},
diff --git a/llvm/lib/Target/RISCV/RISCVFeatures.td b/llvm/lib/Target/RISCV/RISCVFeatures.td
index be8834fd4c2f..4b1fe67290a2 100644
--- a/llvm/lib/Target/RISCV/RISCVFeatures.td
+++ b/llvm/lib/Target/RISCV/RISCVFeatures.td
@@ -415,6 +415,9 @@ def HasStdExtZicbop : Predicate<"Subtarget->hasStdExtZicbop()">,
                                 AssemblerPredicate<(all_of FeatureStdExtZicbop),
                                 "'Zicbop' (Cache-Block Prefetch Instructions)">;

+// RISCVFeatures.td - INSERTION_START
+// RISCVFeatures.td - INSERTION_END
+
 def FeatureStdExtSvnapot
     : SubtargetFeature<"svnapot", "HasStdExtSvnapot", "true",
                        "'Svnapot' (NAPOT Translation Contiguity)">;
diff --git a/llvm/lib/Target/RISCV/RISCVInstrInfo.td b/llvm/lib/Target/RISCV/RISCVInstrInfo.td
index c699a94943d8..707abb4e2635 100644
--- a/llvm/lib/Target/RISCV/RISCVInstrInfo.td
+++ b/llvm/lib/Target/RISCV/RISCVInstrInfo.td
@@ -306,6 +306,9 @@ def simm21_lsb0_jal : Operand<OtherVT> {
   let OperandType = "OPERAND_PCREL";
 }

+// RISCVInstrInfo.td - field_types - INSERTION_START
+// RISCVInstrInfo.td - field_types - INSERTION_END
+
 def BareSymbol : AsmOperandClass {
   let Name = "BareSymbol";
   let RenderMethod = "addImmOperands";
@@ -1864,3 +1864,6 @@ include "RISCVInstrInfoZicbo.td"

 include "RISCVInstrInfoXVentana.td"
 include "RISCVInstrInfoXTHead.td"
+
+// RISCVInstrInfo.td - INSERTION_START
+// RISCVInstrInfo.td - INSERTION_END
diff --git a/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h b/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h
index 2cf2045c1719..66da60ef3ade 100644
--- a/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h
+++ b/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h
@@ -254,6 +254,8 @@ enum OperandType : unsigned {
   OPERAND_UIMMLOG2XLEN,
   OPERAND_UIMMLOG2XLEN_NONZERO,
   OPERAND_UIMM_SHFL,
+// RISCVBaseInfo.h - riscv_operands - INSERTION_START
+// RISCVBaseInfo.h - riscv_operands - INSERTION_END
   OPERAND_VTYPEI10,
   OPERAND_VTYPEI11,
   OPERAND_RVKRNUM,
diff --git a/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp b/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp
index 9752e398bd99..9a881b8d90b3 100644
--- a/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp
+++ b/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp
@@ -568,6 +568,8 @@ public:
   bool isUImm3() { return IsUImm<3>(); }
   bool isUImm5() { return IsUImm<5>(); }
   bool isUImm7() { return IsUImm<7>(); }
+// RISCVAsmParser.cpp - riscv_operands - INSERTION_START
+// RISCVAsmParser.cpp - riscv_operands - INSERTION_END

   bool isRnumArg() const {
     int64_t Imm;
diff --git a/llvm/lib/Target/RISCV/RISCVISelLowering.cpp b/llvm/lib/Target/RISCV/RISCVISelLowering.cpp
index a1dc6a0cd2c1..b88ed2c4819d 100644
--- a/llvm/lib/Target/RISCV/RISCVISelLowering.cpp
+++ b/llvm/lib/Target/RISCV/RISCVISelLowering.cpp
@@ -465,6 +465,9 @@ RISCVTargetLowering::RISCVTargetLowering(const TargetMachine &TM,

   setBooleanContents(ZeroOrOneBooleanContent);

+// RISCVISelLowering.cpp - legal_ops - INSERTION_START
+// RISCVISelLowering.cpp - legal_ops - INSERTION_END
+
   if (Subtarget.hasVInstructions()) {
     setBooleanVectorContents(ZeroOrOneBooleanContent);

diff --git a/llvm/lib/Target/RISCV/RISCVInstrInfo.td b/llvm/lib/Target/RISCV/RISCVInstrInfo.td
index 14c23085859b..0144b5de2195 100644
--- a/llvm/lib/Target/RISCV/RISCVInstrInfo.td
+++ b/llvm/lib/Target/RISCV/RISCVInstrInfo.td
@@ -401,6 +401,8 @@ def uimm6gt32 : ImmLeaf<XLenVT, [{
 def FrameAddrRegImm : ComplexPattern<iPTR, 2, "SelectFrameAddrRegImm",
                                      [frameindex, or, add]>;
 def AddrRegImm : ComplexPattern<iPTR, 2, "SelectAddrRegImm">;
+// RISCVInstrInfo.td - complex_patterns - INSERTION_START
+// RISCVInstrInfo.td - complex_patterns - INSERTION_END

 // Return the negation of an immediate value.
 def NegImm : SDNodeXForm<imm, [{
